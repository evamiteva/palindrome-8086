EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
mycode.exe -- emu8086 assembler version: 4.08  
 
[ 22.5.2024  --  11:51:41 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       DATA SEGMENT
[   2]        :                                       
[   3]    0000: 4D 41 4C 41 59 41 4C 41 4D            BLOCK1 DB 'MALAYALAM'  ; Original string to check for palindrome
[   4]    0009: 49 54 20 49 53 20 50 41 4C 49 4E 44   MSG1 DB "IT IS PALINDROME $"  ; Message to display if the string is a palindrome
                52 4F 4D 45 20 24                   
[   5]    001B: 49 54 20 49 53 20 4E 4F 54 20 50 41   MSG2 DB "IT IS NOT PALINDROME $"  ; Message to display if the string is not a palindrome
                4C 49 4E 44 52 4F 4D 45 20 24       
[   6]    0031: 00                                    PAL DB 00H  ; Variable to store the result (not used in the current code)
[   7]        :                                       
[   8]        :                                       DATA ENDS
[   9]        :                                       
[  10]        :                                       PRINT MACRO MSG
[  11]        :                                       MOV AH,09H  ; DOS interrupt to display a string
[  12]        :                                       LEA DX,MSG  ; Load address of the message into DX
[  13]        :                                       INT 21H  ; Call DOS interrupt
[  14]        :                                       INT 3H  ; Breakpoint interrupt (not necessary in final code)
[  15]        :                                       ENDM
[  16]        :                                       
[  17]        :                                       EXTRA SEGMENT
[  18]        :                                       
[  19]    0040: 00 00 00 00 00 00 00 00 00            BLOCK2 DB 9 DUP(?)  ; Reserve 9 bytes in EXTRA segment to store the reversed string
[  20]        :                                       
[  21]        :                                       EXTRA ENDS
[  22]        :                                       
[  23]        :                                       CODE SEGMENT
[  24]        :                                       ASSUME CS:CODE,DS:DATA,ES:EXTRA
[  25]        :                                       
[  26]    0050:                                       START:
[  27]    0050: B8 00 00                              MOV AX,DATA  ; Load DATA segment address into AX
[  28]    0053: 8E D8                                 MOV DS,AX  ; Move it to DS register
[  29]    0055: B8 04 00                              MOV AX,EXTRA  ; Load EXTRA segment address into AX
[  30]    0058: 8E C0                                 MOV ES,AX  ; Move it to ES register
[  31]        :                                       
[  32]    005A: BE 00 00                              LEA SI,BLOCK1  ; Load address of BLOCK1 (original string) into SI
[  33]    005D: BF 08 00                              LEA DI,BLOCK2+8  ; Load address of BLOCK2 (end of the reversed string buffer) into DI
[  34]    0060: B9 09 00                              MOV CX,0009H  ; Set loop counter to 9 (length of the string)
[  35]        :                                       
[  36]    0063:                                       BACK:
[  37]    0063: FC                                    CLD  ; Clear direction flag for forward string operation
[  38]    0064: AC                                    LODSB  ; Load byte from DS:SI into AL and increment SI
[  39]    0065: FD                                    STD  ; Set direction flag for reverse string operation
[  40]    0066: AA                                    STOSB  ; Store byte in AL into ES:DI and decrement DI
[  41]    0067: E2 FA                                 LOOP BACK  ; Loop until CX is 0
[  42]        :                                       
[  43]    0069: BE 00 00                              LEA SI,BLOCK1  ; Reload address of BLOCK1 into SI
[  44]    006C: BF 00 00                              LEA DI,BLOCK2  ; Load start address of BLOCK2 (reversed string) into DI
[  45]    006F: B9 09 00                              MOV CX,0009H  ; Set loop counter to 9
[  46]        :                                       
[  47]    0072: FC                                    CLD  ; Clear direction flag for forward string comparison
[  48]    0073: F3 A6                                 REPZ CMPSB  ; Compare strings at DS:SI and ES:DI, repeat while equal and CX != 0
[  49]        :                                       
[  50]    0075: 75 0A                                 JNZ SKIP  ; Jump to SKIP if strings are not equal (ZF=0)
[  51]    0077: B4 09 BA 09 00 CD 21 CC               PRINT MSG1  ; Print "IT IS PALINDROME" if strings are equal
[  52]    007F: EB 08                                 JMP DONE  ; Jump to DONE to avoid printing both messages
[  53]        :                                       
[  54]    0081:                                       SKIP:
[  55]    0081: B4 09 BA 1B 00 CD 21 CC               PRINT MSG2  ; Print "IT IS NOT PALINDROME" if strings are not equal
[  56]        :                                       
[  57]    0089:                                       DONE:
[  58]        :                                       ; Add code to exit program gracefully (not included here)
[  59]        :                                       
[  60]        :                                       CODE ENDS
[  61]        :                                       END START
[  62]        :                                       
[  63]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 89      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 02      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 7C      -   check sum (l.byte)
0013: 91      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 05      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 05      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 06      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 05      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
